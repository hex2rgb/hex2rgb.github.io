---
title: "Docker常用命令"
date: 2018-12-12T08:18:34+08:00
tags: ["docker常用命令"]
categories: ["docker"]
description: ""
menu: ""
banner: "/banners/docker.jpeg"
images: []
---
### 删除容器
```shell script
docker rm $(docker ps -a | grep "Exited" | awk '{print $1 }')
```
### 删除none镜像
```shell script
docker rmi $(docker images | grep "none" | awk '{print $3}') 
```

### docker 基础命令

查看centos镜像，也可以 docker search cent (搜索含有cent的)
```shell script
docker search centos
```
<!--more-->
筛选查看官方镜像 含有cent
```shell script
docker search -f is-official=true cent
```
 
最大条数5条(默认25条)
```shell script
docker search --limit 5
````
 
下载centos 7版本(下载指定版本)
```shell script
docker pull centos:7
```
  
查看本地镜像
```shell script
docker images
````
 
查看本地镜像(区别不知道)
```shell script
   docker images ls
```
  
展示是ubuntu
```shell script
docker ubuntu
````
 
模糊匹配(含有多个相同名称的镜像但是tag不同则需要指定版本:latest)
```shell script
docker ubu*:latest
```
 
删除镜像,默认删除latest版本
```shell script
docker rmi ubuntu
````
 
删除指定版本(image id 输入可表示唯一的就可以)(使用name找不到镜像时需要指定版本号)
```shell script
   docker rmi ubuntu:imageid/tag
```
 
强制删除
```shell script
docker rmi -f ubuntu
````
 
保存镜像(多个)到 路径linux.tar(使用imageid 保存后再导入 name 和tag 会丢失)
```shell script
docker save ubuntu centos > linux.tar
```
 
保存镜像(多个)到 路径linux.tar
```shell script
docker save ubuntu centos -o linux.tar
````
 
导入路径为linux.tar 的镜像
```shell script
docker load -i linux.tar
```
 
增加一个镜像引用,并不会更改原有镜像的tag
```shell script
docker tag centos centos:7.4
````
 
对于name或者tag为none的镜像,会将该镜像重命名,不会创建一个引用
```shell script
docker tag imageid ubuntu:lastest
```
 
查看镜像详细信息
```shell script
docker image inspect centos
````
 
查看镜像详细信息grep 后面是查询的字符串(只能跟镜像)
```shell script
docker image inspect centos:7 | grep Created
```
 
(只能跟镜像)
```shell script
docker image inspect -f "{{json .Id}}" centos:7
````
  
(可以查容器或者image)
```shell script
docker inspect
```
 
查看指定镜像的创建历史。
```shell script
docker history centos
````
创建container
```shell script
docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
# 例: docker creat --name centos centos:7 ls -a
```
  
分配虚拟终端
```shell script
docker create -ti
````
 
删除create 状态的容器
```shell script
docker rm centos_test 031dad72b794 4293516e9cbb
```
 
启动并将容器命令执行结果输出在控制台
```shell script
docker start -a centos-name
````
 
创建容器分配虚拟终端(-ti用以执行交互命令)
```shell script
    docker create -ti --name python-new2 centos python
```
  
启动容器分配虚拟终端(-i用以执行交互命令,只是输出结果则使用-a即可)
```shell script
docker start -ai python-new2
````
 
前台运行，等价于 docker create centos + docker start -a centos 
```shell script
docker run centos ls
```
 
后台运行，等价于 docker create + docker start
```shell script
    docker run -d
````
 
定时关闭容器
```shell script
docker stop -t 0 bf
```

关闭容器
 
```shell script
# -s 信号(kill -l 查看信号)
# stop SIGTERM (可以被阻止)
# stop SIGKILL (不可以被阻止) 
docker kill
````

 
暂停容器
```shell script
docker pause CONTAINER
```
 
恢复容器
```shell script
docker unpause
````
  
重启容器
```shell script
# 等价于docker stop + dockerstart
docker restart
```
 
--rm:stop后自动删除
```shell script
docker run -dti --rm centos bash
docker create -dti --rm centos bash
````
 
查看详细信息 === docker inspect
```shell script
docker container inspect
```
 
查看cmd命令的输出结果
```shell script
# -f :持续输出
# --tail :输出结尾几行默认输出全部
docker logs centos
````

 
容器重命名
```shell script
docker rename CONTAINER newname
```

 
容器链接
```shell script
# 像ssh一样链接到容器中的[主进程]中,退出后改容器也会退出
# --no-stdin:不绑定STDIN(输入不会被主进程接收但是,主进程输出可以全出--network输出到)
docker attach (主进程操作)
````
 
连接子进程,子进程退出的时候不会影响主进程(1 号进程)
```shell script
# docker exec -dti CONTAINER  python(-d 后台运行)
# docker exec -w /root/ (切换工作目录)
# docker exec -e (设置容器中运行的环境变量)
docker exec -ti CONTAINER  python
```

